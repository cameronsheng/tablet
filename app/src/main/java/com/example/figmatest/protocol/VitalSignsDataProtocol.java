// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.5.1
//
// Generated by DffGenerator (Version 0.74.7)
// Generated from Engine.dff
//
// AUTO-GENERATED FILE. DO NOT MODIFY.

package com.example.figmatest.protocol;

import com.example.figmatest.imt.base.core.serialization.Deserializer;
import com.example.figmatest.imt.base.core.serialization.SerializableIfc;
import com.example.figmatest.imt.base.core.serialization.Serializer;

import java.util.Objects;

public final class VitalSignsDataProtocol implements SerializableIfc {
    float tidalVolume;
    float systolicPressure;
    float diastolicPressure;
    float heartRate;
    float respirationRate;
    float oxygenSaturation;

    /**
     * Constructor.
     */
    public VitalSignsDataProtocol(float tidalVolume, float systolicPressure, float diastolicPressure, float heartRate, 
        float respirationRate, float oxygenSaturation)
    {
        this.tidalVolume = tidalVolume;
        this.systolicPressure = systolicPressure;
        this.diastolicPressure = diastolicPressure;
        this.heartRate = heartRate;
        this.respirationRate = respirationRate;
        this.oxygenSaturation = oxygenSaturation;
    }

    public VitalSignsDataProtocol(Deserializer deserializer) {
        deserialize(deserializer);
    }

    @Override
    public int getMaxSerializedSize() {
        return 24;
    }

    @Override
    public void deserialize(Deserializer deserializer) {
        tidalVolume = deserializer.readFloat32();
        systolicPressure = deserializer.readFloat32();
        diastolicPressure = deserializer.readFloat32();
        heartRate = deserializer.readFloat32();
        respirationRate = deserializer.readFloat32();
        oxygenSaturation = deserializer.readFloat32();
    }

    @Override
    public void serialize(Serializer serializer) {
        serializer.writeFloat32(tidalVolume);
        serializer.writeFloat32(systolicPressure);
        serializer.writeFloat32(diastolicPressure);
        serializer.writeFloat32(heartRate);
        serializer.writeFloat32(respirationRate);
        serializer.writeFloat32(oxygenSaturation);
    }

    @Override
    public VitalSignsDataProtocol deepClone() {
        return new VitalSignsDataProtocol(
                tidalVolume,
                systolicPressure,
                diastolicPressure,
                heartRate,
                respirationRate,
                oxygenSaturation);
    }

    public float getTidalVolume() {
        return tidalVolume;
    }

    public float getSystolicPressure() {
        return systolicPressure;
    }

    public float getDiastolicPressure() {
        return diastolicPressure;
    }

    public float getHeartRate() {
        return heartRate;
    }

    public float getRespirationRate() {
        return respirationRate;
    }

    public float getOxygenSaturation() {
        return oxygenSaturation;
    }

    @Override
    public boolean equals(Object obj) {
        if ((obj == null) || !(obj instanceof VitalSignsDataProtocol)) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        final VitalSignsDataProtocol other = (VitalSignsDataProtocol) obj;
        return Objects.equals(this.tidalVolume, other.tidalVolume)
            && Objects.equals(this.systolicPressure, other.systolicPressure)
            && Objects.equals(this.diastolicPressure, other.diastolicPressure)
            && Objects.equals(this.heartRate, other.heartRate)
            && Objects.equals(this.respirationRate, other.respirationRate)
            && Objects.equals(this.oxygenSaturation, other.oxygenSaturation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            this.tidalVolume, 
            this.systolicPressure, 
            this.diastolicPressure, 
            this.heartRate, 
            this.respirationRate, 
            this.oxygenSaturation
        );
    }

    public static VitalSignsDataProtocol.Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private VitalSignsDataProtocol protocol;
        private float tidalVolume;
        private float systolicPressure;
        private float diastolicPressure;
        private float heartRate;
        private float respirationRate;
        private float oxygenSaturation;

        public Builder() {
        }

        /**
         * Constructor.
         */
        public Builder(VitalSignsDataProtocol protocol) {
            if (protocol == null) {
                return;
            }
            this.tidalVolume = protocol.tidalVolume;
            this.systolicPressure = protocol.systolicPressure;
            this.diastolicPressure = protocol.diastolicPressure;
            this.heartRate = protocol.heartRate;
            this.respirationRate = protocol.respirationRate;
            this.oxygenSaturation = protocol.oxygenSaturation;
        }

        /**
         * Sets current values from existing protocol.
         */
        public void set(VitalSignsDataProtocol protocol) {
            if (protocol == null) {
                return;
            }
            this.tidalVolume = protocol.tidalVolume;
            this.systolicPressure = protocol.systolicPressure;
            this.diastolicPressure = protocol.diastolicPressure;
            this.heartRate = protocol.heartRate;
            this.respirationRate = protocol.respirationRate;
            this.oxygenSaturation = protocol.oxygenSaturation;
        }

        public VitalSignsDataProtocol.Builder tidalVolume(float tidalVolume) {
            this.tidalVolume = tidalVolume;
            return this;
        }

        public VitalSignsDataProtocol.Builder systolicPressure(float systolicPressure) {
            this.systolicPressure = systolicPressure;
            return this;
        }

        public VitalSignsDataProtocol.Builder diastolicPressure(float diastolicPressure) {
            this.diastolicPressure = diastolicPressure;
            return this;
        }

        public VitalSignsDataProtocol.Builder heartRate(float heartRate) {
            this.heartRate = heartRate;
            return this;
        }

        public VitalSignsDataProtocol.Builder respirationRate(float respirationRate) {
            this.respirationRate = respirationRate;
            return this;
        }

        public VitalSignsDataProtocol.Builder oxygenSaturation(float oxygenSaturation) {
            this.oxygenSaturation = oxygenSaturation;
            return this;
        }

        /**
         * Builds the VitalSignsDataProtocol object.
         */
        public VitalSignsDataProtocol build() {
            protocol = new VitalSignsDataProtocol(
                    tidalVolume,
                    systolicPressure,
                    diastolicPressure,
                    heartRate,
                    respirationRate,
                    oxygenSaturation);
            return protocol;
        }

        /**
         * Builds or updates the VitalSignsDataProtocol object.
         */
        public VitalSignsDataProtocol buildOrUpdate() {
            if (protocol == null) {
                return build();
            }
            protocol.tidalVolume = this.tidalVolume;
            protocol.systolicPressure = this.systolicPressure;
            protocol.diastolicPressure = this.diastolicPressure;
            protocol.heartRate = this.heartRate;
            protocol.respirationRate = this.respirationRate;
            protocol.oxygenSaturation = this.oxygenSaturation;
            return protocol;
        }
    }
}
