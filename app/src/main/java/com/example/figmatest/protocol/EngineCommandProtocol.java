// (c) IMT - Information Management Technology AG, CH-9470 Buchs, www.imt.ch.
// SW guideline: Technote Coding Guidelines Version. 1.5.1
//
// Generated by DffGenerator (Version 0.74.7)
// Generated from Engine.dff
//
// AUTO-GENERATED FILE. DO NOT MODIFY.

package com.example.figmatest.protocol;

import com.example.figmatest.imt.base.core.serialization.Deserializer;
import com.example.figmatest.imt.base.core.serialization.SerializableIfc;
import com.example.figmatest.imt.base.core.serialization.Serializer;

import java.util.Objects;

public final class EngineCommandProtocol implements SerializableIfc {
    short engineCommand;

    /**
     * Constructor.
     */
    public EngineCommandProtocol(short engineCommand) {
        this.engineCommand = engineCommand;
    }

    public EngineCommandProtocol(Deserializer deserializer) {
        deserialize(deserializer);
    }

    @Override
    public int getMaxSerializedSize() {
        return 1;
    }

    @Override
    public void deserialize(Deserializer deserializer) {
        engineCommand = deserializer.readUInt8();
    }

    @Override
    public void serialize(Serializer serializer) {
        serializer.writeUInt8(engineCommand);
    }

    @Override
    public EngineCommandProtocol deepClone() {
        return new EngineCommandProtocol(
                engineCommand);
    }

    public short getEngineCommand() {
        return engineCommand;
    }

    @Override
    public boolean equals(Object obj) {
        if ((obj == null) || !(obj instanceof EngineCommandProtocol)) {
            return false;
        }
        if (obj == this) {
            return true;
        }
        final EngineCommandProtocol other = (EngineCommandProtocol) obj;
        return Objects.equals(this.engineCommand, other.engineCommand);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
            this.engineCommand
        );
    }

    public static EngineCommandProtocol.Builder builder() {
        return new Builder();
    }

    public static final class Builder {
        private EngineCommandProtocol protocol;
        private short engineCommand;

        public Builder() {
        }

        /**
         * Constructor.
         */
        public Builder(EngineCommandProtocol protocol) {
            if (protocol == null) {
                return;
            }
            this.engineCommand = protocol.engineCommand;
        }

        /**
         * Sets current values from existing protocol.
         */
        public void set(EngineCommandProtocol protocol) {
            if (protocol == null) {
                return;
            }
            this.engineCommand = protocol.engineCommand;
        }

        public EngineCommandProtocol.Builder engineCommand(short engineCommand) {
            this.engineCommand = engineCommand;
            return this;
        }

        /**
         * Builds the EngineCommandProtocol object.
         */
        public EngineCommandProtocol build() {
            protocol = new EngineCommandProtocol(
                    engineCommand);
            return protocol;
        }

        /**
         * Builds or updates the EngineCommandProtocol object.
         */
        public EngineCommandProtocol buildOrUpdate() {
            if (protocol == null) {
                return build();
            }
            protocol.engineCommand = this.engineCommand;
            return protocol;
        }
    }
}
